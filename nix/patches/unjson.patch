diff --git a/src/Data/Unjson.hs b/src/Data/Unjson.hs
index 5df6ec3..ed6c7a2 100644
--- a/src/Data/Unjson.hs
+++ b/src/Data/Unjson.hs
@@ -187,7 +187,8 @@ import qualified Data.HashMap.Strict as HashMap
 import qualified Data.HashMap.Lazy as LazyHashMap
 import Control.Exception
 
-import Control.Monad
+import Control.Monad hiding (fail)
+import Control.Monad.Fail (MonadFail (..))
 import Data.Bits
 import Data.Word
 import Data.Int
@@ -195,6 +196,7 @@ import Data.Ratio
 import Data.List
 import qualified Text.ParserCombinators.ReadP as ReadP
 import Data.Char
+import Prelude hiding (fail)
 
 #if !MIN_VERSION_base(4,6,0)
 import Prelude hiding (catch)
@@ -284,6 +286,8 @@ instance Monad Result where
   return = pure
   Result a [] >>= m = m a
   Result _ es@(e:_) >>= _ = Result (throw e) es
+
+instance MonadFail Result where
   fail str = Result (throw anchoredMessage) [anchoredMessage]
     where anchoredMessage = Anchored mempty (Text.pack str)
 
@@ -1478,7 +1482,7 @@ render = P.render . renderDoc
 
 -- | Render only selected part of structure documentation. Path should
 -- point to a subtree, if it does not then Nothing is returned.
-renderForPath :: (Functor m, Monad m) => Path -> UnjsonDef a -> m String
+renderForPath :: (Functor m, Monad m, MonadFail m) => Path -> UnjsonDef a -> m String
 renderForPath path def = fmap P.render (renderDocForPath path def)
 
 -- | Renders documentation for a parser into a 'P.Doc'. See 'render'
@@ -1501,7 +1505,7 @@ renderDoc (UnionUnjsonDef z) = P.text (ansiDimmed ++ "plain union based on prese
 -- | Render only selected part of structure documentation as
 -- 'P.Doc'. Path should point to a subtree, if it does not then
 -- Nothing is returned.
-renderDocForPath :: (Monad m) => Path -> UnjsonDef a -> m P.Doc
+renderDocForPath :: (Monad m, MonadFail m) => Path -> UnjsonDef a -> m P.Doc
 renderDocForPath path def = findNestedUnjson path def
 
 
@@ -1531,20 +1535,20 @@ renderTupleField (TupleFieldDef index _f d) =
   where
     s = renderDoc d
 
-findNestedUnjson :: (Monad m) => Path -> UnjsonDef a -> m P.Doc
+findNestedUnjson :: (Monad m, MonadFail m) => Path -> UnjsonDef a -> m P.Doc
 findNestedUnjson (Path []) u = return (renderDoc u)
 findNestedUnjson (Path (PathElemIndex n : rest)) (TupleUnjsonDef d) = findNestedTupleUnjson n (Path rest) d
 findNestedUnjson (Path (PathElemIndex _ : rest)) (ArrayUnjsonDef _ _ _ _ d) = findNestedUnjson (Path rest) d
 findNestedUnjson (Path (PathElemKey k : rest)) (ObjectUnjsonDef d) = findNestedFieldUnjson k (Path rest) d
 findNestedUnjson _ _ = fail "cannot find crap"
 
-findNestedTupleUnjson :: (Monad m) => Int -> Path -> Ap (TupleFieldDef s) a -> m P.Doc
+findNestedTupleUnjson :: (Monad m, MonadFail m) => Int -> Path -> Ap (TupleFieldDef s) a -> m P.Doc
 findNestedTupleUnjson n path (Ap (TupleFieldDef index _f d) _r) | n == index = findNestedUnjson path d
 findNestedTupleUnjson n path (Ap (TupleFieldDef _index _f _d) r) =
   findNestedTupleUnjson n path r
 findNestedTupleUnjson _ _ _ = fail "findNestedTupleUnjson"
 
-findNestedFieldUnjson :: (Monad m) => Text.Text -> Path -> Ap (FieldDef s) a -> m P.Doc
+findNestedFieldUnjson :: (Monad m, MonadFail m) => Text.Text -> Path -> Ap (FieldDef s) a -> m P.Doc
 findNestedFieldUnjson key (Path []) (Ap f@(FieldReqDef k _ _ _d) _r) | k==key = return (renderField f)
 findNestedFieldUnjson key (Path []) (Ap f@(FieldOptDef k _ _ _d) _r) | k==key = return (renderField f)
 findNestedFieldUnjson key (Path []) (Ap f@(FieldDefDef k _ _ _ _d) _r) | k==key = return (renderField f)
diff --git a/unjson.cabal b/unjson.cabal
index 1957d7a..2af59c3 100644
--- a/unjson.cabal
+++ b/unjson.cabal
@@ -31,7 +31,7 @@ library
   exposed-modules:     Data.Unjson
   -- other-modules:
   -- other-extensions:
-  build-depends:       base >= 4.7 && < 4.13,
+  build-depends:       base >= 4.7 && < 4.14,
                        aeson >= 1.0 && < 1.5,
                        attoparsec,
                        bytestring >= 0.10,
