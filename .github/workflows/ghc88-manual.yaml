jobs:
  backend-tests:
    runs-on:
      - ubuntu-latest
    steps:
      - name: Checkout Code
        uses: "actions/checkout@v2"
      - name: Setup Nix
        uses: "cachix/install-nix-action@v10"
      - name: Setup Cachix
        uses: "cachix/cachix-action@v6"
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: scrive
      - env:
          SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
        name: Setup SSH
        run: |
          eval $(ssh-agent)
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "::set-env name=SSH_AUTH_SOCK::$SSH_AUTH_SOCK"
      - name: Load Nix Shell
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "echo Loaded Nix shell"
      - name: "Cache ~/.cabal"
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-cabal-backend-tests-${{ hashFiles('**/*.cabal') }}"
          path: "~/.cabal"
          restore-keys: |
            ${{ runner.os }}-cabal-backend-tests-${{ hashFiles('**/*.cabal') }}
            ${{ runner.os }}-cabal-backend-tests-
      - env:
          PDFTOOLS_CONFIG: "${{ secrets.PDFTOOLS_CONFIG }}"
        name: Run Backend Tests
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "./ci/scripts/run-backend-tests.sh"
        timeout-minutes: 180
  detect-unused:
    runs-on:
      - ubuntu-latest
    steps:
      - name: Checkout Code
        uses: "actions/checkout@v2"
      - name: Setup Nix
        uses: "cachix/install-nix-action@v10"
      - name: Setup Cachix
        uses: "cachix/cachix-action@v6"
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: scrive
      - env:
          SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
        name: Setup SSH
        run: |
          eval $(ssh-agent)
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "::set-env name=SSH_AUTH_SOCK::$SSH_AUTH_SOCK"
      - name: Load Nix Shell
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "echo Loaded Nix shell"
      - name: "Cache ~/.cabal"
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-cabal-detect-unused-${{ hashFiles('**/*.cabal') }}"
          path: "~/.cabal"
          restore-keys: |
            ${{ runner.os }}-cabal-detect-unused-${{ hashFiles('**/*.cabal') }}
            ${{ runner.os }}-cabal-detect-unused-
      - name: Detect Old Templates
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "./shake.sh detect-old-templates"
      - name: Detect Old Localizations
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "./shake.sh detect-old-localizations"
  formatting:
    runs-on:
      - ubuntu-latest
    steps:
      - name: Checkout Code
        uses: "actions/checkout@v2"
      - name: Setup Nix
        uses: "cachix/install-nix-action@v10"
      - name: Setup Cachix
        uses: "cachix/cachix-action@v6"
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: scrive
      - env:
          SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
        name: Setup SSH
        run: |
          eval $(ssh-agent)
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "::set-env name=SSH_AUTH_SOCK::$SSH_AUTH_SOCK"
      - name: Load Nix Shell
        run: |
          nix-shell -j8 --arg extra-run-deps 'pkgs: hsPkgs: [ pkgs.git ]' \
            -A ghc88.manual-shell \
            release.nix \
            --run "echo Loaded Nix shell"
      - name: "Cache ~/.cabal"
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-cabal-test-formatting-${{ hashFiles('**/*.cabal') }}"
          path: "~/.cabal"
          restore-keys: |
            ${{ runner.os }}-cabal-test-formatting-${{ hashFiles('**/*.cabal') }}
            ${{ runner.os }}-cabal-test-formatting-
      - name: Test Formatting
        run: |
          nix-shell -j8 --arg extra-run-deps 'pkgs: hsPkgs: [ pkgs.git ]' \
            -A ghc88.manual-shell \
            release.nix \
            --run "./ci/scripts/test-formatting.sh"
      - if: "${{ failure() }}"
        name: Upload Formatting Patch
        uses: "actions/upload-artifact@v2"
        with:
          name: formatting.patch
          path: "_build/formatting.patch"
  haddock:
    runs-on:
      - ubuntu-latest
    steps:
      - name: Checkout Code
        uses: "actions/checkout@v2"
      - name: Setup Nix
        uses: "cachix/install-nix-action@v10"
      - name: Setup Cachix
        uses: "cachix/cachix-action@v6"
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: scrive
      - env:
          SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
        name: Setup SSH
        run: |
          eval $(ssh-agent)
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "::set-env name=SSH_AUTH_SOCK::$SSH_AUTH_SOCK"
      - name: Load Nix Shell
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "echo Loaded Nix shell"
      - name: "Cache ~/.cabal"
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-cabal-Build Haddock-${{ hashFiles('**/*.cabal') }}"
          path: "~/.cabal"
          restore-keys: |
            ${{ runner.os }}-cabal-Build Haddock-${{ hashFiles('**/*.cabal') }}
            ${{ runner.os }}-cabal-Build Haddock-
      - name: Build Haddock
        run: |
          nix-shell -j8 \
            -A ghc88.manual-shell \
            release.nix \
            --run "./shake.sh haddock"
  hlint:
    runs-on:
      - ubuntu-latest
    steps:
      - name: Checkout Code
        uses: "actions/checkout@v2"
      - name: Setup Nix
        uses: "cachix/install-nix-action@v10"
      - name: Setup Cachix
        uses: "cachix/cachix-action@v6"
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: scrive
      - env:
          SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
        name: Setup SSH
        run: |
          eval $(ssh-agent)
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "::set-env name=SSH_AUTH_SOCK::$SSH_AUTH_SOCK"
      - name: Load Nix Shell
        run: |
          nix-shell -j8 --arg extra-run-deps 'pkgs: hsPkgs: [ pkgs.git ]' \
            -A ghc88.manual-shell \
            release.nix \
            --run "echo Loaded Nix shell"
      - name: "Cache ~/.cabal"
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-cabal-hlint-${{ hashFiles('**/*.cabal') }}"
          path: "~/.cabal"
          restore-keys: |
            ${{ runner.os }}-cabal-hlint-${{ hashFiles('**/*.cabal') }}
            ${{ runner.os }}-cabal-hlint-
      - name: Test HLint
        run: |
          nix-shell -j8 --arg extra-run-deps 'pkgs: hsPkgs: [ pkgs.git ]' \
            -A ghc88.manual-shell \
            release.nix \
            --run "./ci/scripts/test-hlint.sh"
      - if: "${{ failure() }}"
        name: Upload HLint Patch
        uses: "actions/upload-artifact@v2"
        with:
          name: hlint.patch
          path: "_build/hlint.patch"
name: GHC 8.8 Backend Tests
on:
  push:
    branches:
      - master
