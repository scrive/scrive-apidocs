{-# LANGUAGE TemplateHaskell, TypeFamilies, DeriveDataTypeable,
    FlexibleInstances, MultiParamTypeClasses, FlexibleContexts,
    UndecidableInstances, TypeSynonymInstances, StandaloneDeriving, TupleSections #-}    
{-# OPTIONS_GHC -Wall #-}    
-----------------------------------------------------------------------------
-- |
-- Module      :  Payments.PaymentsState
-- Maintainer  :  mariusz@skrivapa.se
-- Stability   :  stable
-- Portability :  portable
--
-- Payment models with data storage interface. Also contains datatype for holding temporary changes in payments (for users)
--
-----------------------------------------------------------------------------

module Payments.PaymentsState  (
       -- Basic types for payments models
       PaymentAccountModel(..),
       Money(..),  
       AccountType(..), 
       PaymentForAccounts(..),
       PaymentForSignature(..),
       PaymentForSignedStorage(..),
       PaymentForOtherStorage(..) , 
       -- User temporaty change of payment values
       PaymentTempChange(..),
       -- Index of models to be used in main app
       PaymentAccountModels,
       -- Utils  
       accountTypes,
       emptyTempChange,
       -- Autogenerated data-functions constructors  
       GetPaymentModel(..),
       GetPaymentModels(..),  
       UpdateAccountModel(..),
       
    ) where

import "mtl" Control.Monad.Reader (ask)
import "mtl" Control.Monad.State hiding (State)
import Happstack.Data (Default, deriveAll, )
import Happstack.Data.IxSet as IxSet
import Happstack.State 

$( deriveAll [''Ord, ''Eq, ''Default, ''Show, ''Read]
   [d|
      -- | Mail model for payments account
      data PaymentAccountModel = PaymentAccountModel {  
                                   modelAccountType::AccountType,
                                   modelPaymentForAccounts::PaymentForAccounts Money,
                                   modelPaymentForSignature::PaymentForSignature Money,
                                   modelPaymentForSignedStorage::PaymentForSignedStorage Money,  
                                   modelPaymentForOtherStorage::PaymentForOtherStorage Money             
      }                           
      -- | Temp change of payments
      data PaymentTempChange = PaymentTempChange {  
                                  tempChangePaymentForAccounts::PaymentForAccounts (Maybe Money),
                                  tempChangePaymentForSignature ::PaymentForSignature (Maybe Money),  
                                  tempChangePaymentForSignedStorage::PaymentForSignedStorage (Maybe Money),  
                                  tempChangePaymentForOtherStorage::PaymentForOtherStorage (Maybe Money)  
      }

      
      -- | Types of accounts
      data AccountType = Private | Minimal | Medium | Maximal | Corp   
      -- | Money values wrapper
      data Money = Money { money:: Integer }
      
      -- | Monthly payments for account and subaccounts
      data PaymentForAccounts value = PaymentForAccounts {
                                 forAccount::value,
                                 forSubaccount::value 
                               }
      -- | Payments for each signature on document                        
      data PaymentForSignature value = PaymentForSignature {
                                 forEmailSignature::value,
                                 forElegSignature::value,  
                                 forMobileSignature::value,  
                                 forCreditCardSignature::value,  
                                 forIPadSignature ::value
                               }                  
      -- | Payments for storage of signed documents                       
      data PaymentForSignedStorage value = PaymentForSignedStorage {
                                 forAmazon::value,
                                 forTrustWeaver::value
                               }  
      -- | Payments for storage of of unsigned templates and drafts       
      data PaymentForOtherStorage value  = PaymentForOtherStorage {
                                 forTemplate::value,
                                 forDraft::value
                               }                        

    |])
    

                                

$(deriveSerialize ''PaymentAccountModel) 
instance Version (PaymentAccountModel) 

$(deriveSerialize ''PaymentTempChange) 
instance Version (PaymentTempChange)

$(deriveSerialize ''AccountType) 
instance Version (AccountType ) 

$(deriveSerialize ''Money ) 
instance Version (Money ) 

$(deriveSerialize ''PaymentForAccounts) 
instance Version (PaymentForAccounts a) 

$(deriveSerialize ''PaymentForSignature) 
instance Version (PaymentForSignature a) 

$(deriveSerialize ''PaymentForSignedStorage) 
instance Version (PaymentForSignedStorage a) 

$(deriveSerialize ''PaymentForOtherStorage) 
instance Version (PaymentForOtherStorage a) 

$(inferIxSet "PaymentAccountModels" ''PaymentAccountModel  'noCalcs [''AccountType ])  
instance Component (PaymentAccountModels) where
  type Dependencies (PaymentAccountModels) = End
  initialValue = IxSet.empty  
  
getPaymentModel::AccountType -> Update PaymentAccountModels PaymentAccountModel
getPaymentModel accountType = 
  do
   models <- ask
   case getOne (models @= accountType) of
    Just model -> return model    
    Nothing -> do
                let nmodel = basicModel accountType
                modify $ insert $ nmodel
                return nmodel
                
getPaymentModels::Update PaymentAccountModels [PaymentAccountModel]
getPaymentModels = mapM getPaymentModel accountTypes

updateAccountModel::AccountType -> PaymentAccountModel -> Update PaymentAccountModels ()
updateAccountModel accountType newmodel =  modify (updateIx accountType newmodel)

-- | Basic empty model, everythhing is free, used only to init database 
basicModel:: AccountType -> PaymentAccountModel
basicModel accountType  = PaymentAccountModel {modelAccountType = accountType,
                                               modelPaymentForAccounts = PaymentForAccounts {
                                                                                  forAccount=free,
                                                                                  forSubaccount=free
                                                                          },
                                               modelPaymentForSignature = PaymentForSignature {
                                                                                  forEmailSignature=free,
                                                                                  forElegSignature=free,
                                                                                  forMobileSignature=free,
                                                                                  forCreditCardSignature=free,
                                                                                  forIPadSignature=free
                                                                          },                         
                                               modelPaymentForSignedStorage = PaymentForSignedStorage {
                                                                                  forAmazon=free,
                                                                                  forTrustWeaver=free
                                                                          },       
                                               modelPaymentForOtherStorage = PaymentForOtherStorage {
                                                                                  forTemplate=free,
                                                                                  forDraft=free
                                                                          }                                            
                                               }
-- | Initial, empty account change - all values are taken from account model                                               
emptyTempChange :: PaymentTempChange                                              
emptyTempChange =  PaymentTempChange {  
                                  tempChangePaymentForAccounts= PaymentForAccounts {
                                                                                  forAccount=Nothing,
                                                                                  forSubaccount=Nothing
                                                                          },
                                  tempChangePaymentForSignature = PaymentForSignature {
                                                                                  forEmailSignature=Nothing,
                                                                                  forElegSignature=Nothing,
                                                                                  forMobileSignature=Nothing,
                                                                                  forCreditCardSignature=Nothing,
                                                                                  forIPadSignature=Nothing
                                                                          },
                                  tempChangePaymentForSignedStorage = PaymentForSignedStorage {
                                                                                  forAmazon=Nothing,
                                                                                  forTrustWeaver=Nothing
                                                                          },       
                                  tempChangePaymentForOtherStorage = PaymentForOtherStorage {
                                                                                  forTemplate=Nothing,
                                                                                  forDraft=Nothing
                                                                          }                                              
                        }
                                              
-- | No money
free::Money
free = Money 0
-- | List of all accounts types
accountTypes::[AccountType]
accountTypes = [Private, Minimal , Medium , Maximal , Corp]

--Wrapper for all functions above
$(mkMethods '' PaymentAccountModels
                    [   'getPaymentModel  
                      , 'getPaymentModels
                      , 'updateAccountModel
                    ])
