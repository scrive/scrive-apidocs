{-# LANGUAGE TemplateHaskell, TypeFamilies, DeriveDataTypeable,
    FlexibleInstances, MultiParamTypeClasses, FlexibleContexts,
    UndecidableInstances, TypeSynonymInstances, StandaloneDeriving, TupleSections #-}    
{-# OPTIONS_GHC -Wall #-}    
-----------------------------------------------------------------------------
-- |
-- Module      :  Payments.PaymentsState
-- Maintainer  :  mariusz@skrivapa.se
-- Stability   :  stable
-- Portability :  portable
--
-- Payment models with data storage interface. Also contains datatype for holding temporary changes in payments (for users)
--
-----------------------------------------------------------------------------

module Payments.PaymentsState  (
       -- Basic types for payments models
         PaymentAccountModel(..)
       , Money(..)
       , PaymentAccountType(..)
       , PaymentForAccounts(..)
       , PaymentForSignature(..)
       , PaymentForSignedStorage(..)
       , PaymentForOtherStorage(..) 
         -- User temporaty change of payment values
       , PaymentChange(..)
       -- Index of models to be used in main app
       , PaymentAccountModels
       --Structures for users payment accounts
       , UserPaymentPolicy(..)
       , UserPaymentAccount(..)
       
       -- Utils  
       , emptyChange
       , basicPaymentPolicy
       , emptyPaymentAccount  
       , free
       -- Autogenerated data-functions constructors  
       , GetPaymentModel(..)
       , GetPaymentModels(..)  
       , UpdateAccountModel(..)
       
    ) where

import "mtl" Control.Monad.Reader (ask)
import "mtl" Control.Monad.State hiding (State)
import Happstack.Data (Default, deriveAll, )
import Happstack.Data.IxSet as IxSet
import Happstack.State 
import Misc (allValues)
import MinutesTime

$( deriveAll [''Ord, ''Eq, ''Default, ''Show, ''Read]
   [d|
      -- | Mail model for payments account
      data PaymentAccountModel = PaymentAccountModel {  
                                   modelAccountType::PaymentAccountType,
                                   modelPaymentForAccounts::PaymentForAccounts Money,
                                   modelPaymentForSignature::PaymentForSignature Money,
                                   modelPaymentForSignedStorage::PaymentForSignedStorage Money,  
                                   modelPaymentForOtherStorage::PaymentForOtherStorage Money             
      }                           
      -- | Temp change of payments
      data PaymentChange = PaymentChange {  
                                  changePaymentForAccounts::PaymentForAccounts (Maybe Money),
                                  changePaymentForSignature ::PaymentForSignature (Maybe Money),  
                                  changePaymentForSignedStorage::PaymentForSignedStorage (Maybe Money),  
                                  changePaymentForOtherStorage::PaymentForOtherStorage (Maybe Money)  
      }

      
      -- | Types of accounts
      data PaymentAccountType = Private | Minimal | Medium | Maximal | Corp   
      -- | Money values wrapper
      data Money = Money { money:: Integer }
      
      -- | Monthly payments for account and subaccounts
      data PaymentForAccounts value = PaymentForAccounts {
                                 forAccount::value,
                                 forSubaccount::value 
                               }
      -- | Payments for each signature on document                        
      data PaymentForSignature value = PaymentForSignature {
                                 forEmailSignature::value,
                                 forElegSignature::value,  
                                 forMobileSignature::value,  
                                 forCreditCardSignature::value,  
                                 forIPadSignature ::value
                               }                  
      -- | Payments for storage of signed documents                       
      data PaymentForSignedStorage value = PaymentForSignedStorage {
                                 forAmazon::value,
                                 forTrustWeaver::value
                               }  
      -- | Payments for storage of of unsigned templates and drafts       
      data PaymentForOtherStorage value  = PaymentForOtherStorage {
                                 forTemplate::value,
                                 forDraft::value
                               }                        
      data UserPaymentPolicy =  UserPaymentPolicy {
               paymentaccounttype:: PaymentAccountType
             , custompaymentchange:: PaymentChange 
             , temppaymentchange:: Maybe (MinutesTime,PaymentChange)
      }  
      data UserPaymentAccount = UserPaymentAccount {
               paymentaccountmoney ::Money
             , paymentaccountfreesignatures:: Int  

      }
    |])
    

                                

$(deriveSerialize ''PaymentAccountModel) 
instance Version (PaymentAccountModel) 

$(deriveSerialize ''PaymentChange) 
instance Version (PaymentChange)

$(deriveSerialize ''PaymentAccountType) 
instance Version (PaymentAccountType ) 

$(deriveSerialize ''Money ) 
instance Version (Money ) 

$(deriveSerialize ''PaymentForAccounts) 
instance Version (PaymentForAccounts a) 

$(deriveSerialize ''PaymentForSignature) 
instance Version (PaymentForSignature a) 

$(deriveSerialize ''PaymentForSignedStorage) 
instance Version (PaymentForSignedStorage a) 

$(deriveSerialize ''PaymentForOtherStorage) 
instance Version (PaymentForOtherStorage a) 

$(deriveSerialize ''UserPaymentPolicy)
instance Version UserPaymentPolicy

$(deriveSerialize ''UserPaymentAccount)
instance Version UserPaymentAccount

deriving instance Bounded PaymentAccountType
deriving instance Enum PaymentAccountType

$(inferIxSet "PaymentAccountModels" ''PaymentAccountModel  'noCalcs [''PaymentAccountType ])  
instance Component (PaymentAccountModels) where
  type Dependencies (PaymentAccountModels) = End
  initialValue = IxSet.empty  
  
getPaymentModel::PaymentAccountType -> Update PaymentAccountModels PaymentAccountModel
getPaymentModel accountType = 
  do
   models <- ask
   case getOne (models @= accountType) of
    Just model -> return model    
    Nothing -> do
                let nmodel = basicModel accountType
                modify $ insert $ nmodel
                return nmodel
                
getPaymentModels::Update PaymentAccountModels [PaymentAccountModel]
getPaymentModels = mapM getPaymentModel (allValues::[PaymentAccountType])

updateAccountModel::PaymentAccountType -> PaymentAccountModel -> Update PaymentAccountModels ()
updateAccountModel accountType newmodel =  modify (updateIx accountType newmodel)

-- | Basic empty model, everythhing is free, used only to init database 
basicModel:: PaymentAccountType -> PaymentAccountModel
basicModel accountType  = PaymentAccountModel {modelAccountType = accountType,
                                               modelPaymentForAccounts = PaymentForAccounts {
                                                                                  forAccount=free,
                                                                                  forSubaccount=free
                                                                          },
                                               modelPaymentForSignature = PaymentForSignature {
                                                                                  forEmailSignature=free,
                                                                                  forElegSignature=free,
                                                                                  forMobileSignature=free,
                                                                                  forCreditCardSignature=free,
                                                                                  forIPadSignature=free
                                                                          },                         
                                               modelPaymentForSignedStorage = PaymentForSignedStorage {
                                                                                  forAmazon=free,
                                                                                  forTrustWeaver=free
                                                                          },       
                                               modelPaymentForOtherStorage = PaymentForOtherStorage {
                                                                                  forTemplate=free,
                                                                                  forDraft=free
                                                                          }                                            
                                               }
-- | Initial, empty account change - all values are taken from account model                                               
emptyChange :: PaymentChange                                              
emptyChange =  PaymentChange {  
                                  changePaymentForAccounts= PaymentForAccounts {
                                                                                  forAccount=Nothing,
                                                                                  forSubaccount=Nothing
                                                                          },
                                  changePaymentForSignature = PaymentForSignature {
                                                                                  forEmailSignature=Nothing,
                                                                                  forElegSignature=Nothing,
                                                                                  forMobileSignature=Nothing,
                                                                                  forCreditCardSignature=Nothing,
                                                                                  forIPadSignature=Nothing
                                                                          },
                                  changePaymentForSignedStorage = PaymentForSignedStorage {
                                                                                  forAmazon=Nothing,
                                                                                  forTrustWeaver=Nothing
                                                                          },       
                                  changePaymentForOtherStorage = PaymentForOtherStorage {
                                                                                  forTemplate=Nothing,
                                                                                  forDraft=Nothing
                                                                          }                                              
                        }
basicPaymentPolicy:: UserPaymentPolicy                        
basicPaymentPolicy =  UserPaymentPolicy {
                                      paymentaccounttype = Private
                                    , custompaymentchange = emptyChange
                                    , temppaymentchange = Nothing
                                   }
emptyPaymentAccount::UserPaymentAccount                                   
emptyPaymentAccount = UserPaymentAccount {
                                      paymentaccountmoney = free
                                    , paymentaccountfreesignatures = 0   
                                    }                                                   
-- | No money
free::Money
free = Money 0

--Wrapper for all functions above
$(mkMethods '' PaymentAccountModels
                    [   'getPaymentModel  
                      , 'getPaymentModels
                      , 'updateAccountModel
                    ])
