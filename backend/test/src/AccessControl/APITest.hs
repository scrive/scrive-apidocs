{-# LANGUAGE OverloadedStrings #-}
module AccessControl.APITest (accessControlApiTests) where

import Data.Aeson
import Happstack.Server
import Test.Framework
import qualified Data.HashMap.Strict as H
import qualified Data.Text as T
import qualified Data.Vector as V

import AccessControl.API
import AccessControl.Model
import AccessControl.Types
import DB
import TestingUtil
import TestKontra
import User.Email
import User.Model
import UserGroup.Model
import UserGroup.Types

accessControlApiTests :: TestEnvSt -> Test
accessControlApiTests env = testGroup
  "AccessControlAPI"
  [ -- AccessControl getuserroles tests
    testThat "non-god-mode and non-sales user can't view non-existent User's roles"
             env
             testNonGodModeUserCannotViewRolesForNonExistentUser
  , testThat
    "non-god-mode and non-sales user can't view User's roles without permissions"
    env
    testNonGodModeUserCannotViewUserRolesWithoutPermissions
  , testThat "non-god-mode and non-sales user can view own roles"
             env
             testNonGodModeUserCanViewOwnRoles
  , testThat "usergroup admin can view roles of other usergroup member"
             env
             testUserGroupAdminCanViewRolesOfOtherUserGroupMember
  , testThat "usergroup member cannot view roles of other usergroup members"
             env
             testUserGroupMemberCannotViewRolesOfOtherUserGroupMembers
  , testThat "all roles are returned including roles generated by UserGroup inheritance"
             env
             testAllInheritedRolesAreReturned
  -- AccessControl get role by ID tests
  , testThat "non-god-mode and non-sales user can't view non-existent role"
             env
             testNonGodModeUserCannotViewNonExistentRoles
  , testThat "non-god-mode and non-sales user can't view a role without permission"
             env
             testNonGodModeUserCannotViewRoleWithoutPermissions
  , testThat "non-god-mode and non-sales user can view own role"
             env
             testNonGodModeUserCanViewOwnRole
  , testThat "god-mode user can view role without permissions"
             env
             testGodModeUserCanViewRoleWithoutPermissions
  -- AccessControl delete role by ID tests
  , testThat "non-god-mode and non-sales user can't delete non-existent role"
             env
             testNonGodModeUserCannotDeleteNonExistentRoles
  , testThat "non-god-mode and non-sales user can't delete a role without permission"
             env
             testNonGodModeUserCannotDeleteRoleWithoutPermissions
  , testThat "non-god-mode and non-sales user can delete own role"
             env
             testNonGodModeUserCanDeleteOwnRole
  , testThat "god-mode user can delete role without permissions"
             env
             testGodModeUserCanDeleteRoleWithoutPermissions
  -- AccessControl add role tests
  , testThat
    "non-god-mode and non-sales user can't add role for non-existent User (trg)"
    env
    testNonGodModeUserCannotAddRoleFromNonExistentUser
  , testThat
    "non-god-mode and non-sales user can't add role for non-existent User (src)"
    env
    testNonGodModeUserCannotAddRoleForNonExistentUser
  , testThat "god-mode user can't add role for non-existent User (trg)"
             env
             testGodModeUserCannotAddRoleFromNonExistentUser
  , testThat "god-mode user can't add role for non-existent User (src)"
             env
             testGodModeUserCannotAddRoleForNonExistentUser
  , testThat
    "non-god-mode and non-sales user can't add role without permissions on target"
    env
    testNonGodModeUserCannotAddRoleWithoutPermissions
  , testThat "non-god-mode and non-sales user can add role with permissions on target"
             env
             testNonGodModeUserCanAddRoleWithPermissions
  , testThat "god-mode user can add role without permissions on target"
             env
             testGodModeUserCanAddRoleWithoutPermissions
  ]

-- AccessControl getuserroles tests

testNonGodModeUserCannotViewRolesForNonExistentUser :: TestEnv ()
testNonGodModeUserCannotViewRolesForNonExistentUser = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  req <- mkRequest GET []
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2GetUserRoles uid)
  assertEqual "non-admin user can't view non-existent user's roles" 403 $ rsCode res
  where uid = unsafeUserID 123

testNonGodModeUserCannotViewUserRolesWithoutPermissions :: TestEnv ()
testNonGodModeUserCannotViewUserRolesWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  req <- mkRequest GET []
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2GetUserRoles uid2)
  assertEqual "non-admin user can't view user's roles without permission" 403 $ rsCode res

testNonGodModeUserCanViewOwnRoles :: TestEnv ()
testNonGodModeUserCanViewOwnRoles = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "The"
                                               , lastName  = return "Cat"
                                               , email     = return "the.cat@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  req <- mkRequest GET []
  let uid = user ^. #id
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2GetUserRoles uid)
  assertEqual "non-admin user can view own roles" 200 $ rsCode res

testUserGroupAdminCanViewRolesOfOtherUserGroupMember :: TestEnv ()
testUserGroupAdminCanViewRolesOfOtherUserGroupMember = do
  user <- instantiateUser $ randomUserTemplate { firstName      = return "Captain"
                                               , lastName       = return "Hollister"
                                               , email          = return emailAddress
                                               , isCompanyAdmin = True
                                               , signupMethod   = CompanyInvitation
                                               }
  let uid1 = user ^. #id
      ugid = user ^. #groupID
  void . dbUpdate . AccessControlCreateForUser uid1 $ UserGroupAdminAR ugid
  user2 <- instantiateUser $ randomUserTemplate { groupID = return ugid }
  let uid2 = user2 ^. #id
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  req <- mkRequest GET []
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2GetUserRoles uid2)
  assertEqual "" 200 $ rsCode res
  where emailAddress = "captain.hollister@scrive.com"

testUserGroupMemberCannotViewRolesOfOtherUserGroupMembers :: TestEnv ()
testUserGroupMemberCannotViewRolesOfOtherUserGroupMembers = do
  user <- instantiateUser $ randomUserTemplate { firstName      = return "Captain"
                                               , lastName       = return "Hollister"
                                               , email          = return emailAddress
                                               , isCompanyAdmin = True
                                               , signupMethod   = CompanyInvitation
                                               }
  let uid1 = user ^. #id
      ugid = user ^. #groupID
  void . dbUpdate . AccessControlCreateForUser uid1 $ UserGroupAdminAR ugid
  user2 <- instantiateUser $ randomUserTemplate { groupID = return ugid }
  ctx   <- set #maybeUser (Just user2) <$> mkContext defaultLang
  req   <- mkRequest GET []
  res   <- fst <$> runTestKontra req ctx (accessControlAPIV2GetUserRoles uid1)
  assertEqual "usergroup member cannot view roles of other usergroup member" 403
    $ rsCode res
  where emailAddress = "captain.hollister@scrive.com"

testAllInheritedRolesAreReturned :: TestEnv ()
testAllInheritedRolesAreReturned = do
  userA <- instantiateUser $ randomUserTemplate
    { firstName      = return "Captain"
    , lastName       = return "Hollister"
    , email          = return "captain.hollister@scrive.com"
    , isCompanyAdmin = True
    , signupMethod   = CompanyInvitation
    }
  ugB0 <- instantiateRandomUserGroup
  ctx  <- set #maybeUser (Just userA) <$> mkContext defaultLang
  void . dbUpdate . UserGroupUpdate . set #parentGroupID (Just $ userA ^. #groupID) $ ugB0
  req <- mkRequest GET []
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2GetUserRoles $ userA ^. #id)
  let
    Just  jsonRoles         = decode (rsBody res) :: Maybe Value
    Array vectorOfJsonRoles = jsonRoles
    roleTypes =
      map (\(Object o) -> H.lookup "role_type" o) . V.toList $ vectorOfJsonRoles
  assertEqual "2 UserAdminAR roles are returned" 2
    . length
    . filter (== Just "user_admin")
    $ roleTypes

-- AccessControl get role by ID tests

testNonGodModeUserCannotViewNonExistentRoles :: TestEnv ()
testNonGodModeUserCannotViewNonExistentRoles = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  req <- mkRequest GET []
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2Get roleId)
  assertEqual "non-admin user can't view non-existent role" 403 $ rsCode res
  where roleId = unsafeAccessRoleID 123

testNonGodModeUserCannotViewRoleWithoutPermissions :: TestEnv ()
testNonGodModeUserCannotViewRoleWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx  <- set #maybeUser (Just user) <$> mkContext defaultLang
  role <- fmap fromJust . dbUpdate . AccessControlCreateForUser uid2 $ UserAR uid2
  req  <- mkRequest GET []
  res  <- fst <$> runTestKontra req ctx (accessControlAPIV2Get $ getRoleId role)
  assertEqual "non-admin user can't view a role without permission" 403 $ rsCode res
  where
    getRoleId (AccessRoleUser roleId _ _) = roleId
    getRoleId _ = unexpectedError "This shouldn't happen"

testNonGodModeUserCanViewOwnRole :: TestEnv ()
testNonGodModeUserCanViewOwnRole = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  let uid = user ^. #id
  role <- fmap fromJust . dbUpdate . AccessControlCreateForUser uid $ UserAR uid
  req  <- mkRequest GET []
  res  <- fst <$> runTestKontra req ctx (accessControlAPIV2Get $ getRoleId role)
  assertEqual "non-admin user can view own role" 200 $ rsCode res
  where
    getRoleId (AccessRoleUser roleId _ _) = roleId
    getRoleId _ = unexpectedError "This shouldn't happen"

testGodModeUserCanViewRoleWithoutPermissions :: TestEnv ()
testGodModeUserCanViewRoleWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName  = return "Lister"
                                               , email     = return emailAddress
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx  <- setUser user <$> mkContext defaultLang
  role <- fmap fromJust . dbUpdate . AccessControlCreateForUser uid2 $ UserAR uid2
  req  <- mkRequest GET []
  res  <- fst <$> runTestKontra req ctx (accessControlAPIV2Get $ getRoleId role)
  assertEqual "admin user can view a role without permission" 200 $ rsCode res
  where
    setUser user = set #maybeUser (Just user) . set #adminAccounts [Email emailAddress]
    emailAddress = "dave.lister@scrive.com"
    getRoleId (AccessRoleUser roleId _ _) = roleId
    getRoleId _ = unexpectedError "This shouldn't happen"

-- AccessControl delete role by ID tests

testNonGodModeUserCannotDeleteNonExistentRoles :: TestEnv ()
testNonGodModeUserCannotDeleteNonExistentRoles = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  req <- mkRequest POST []
  res <- fst <$> runTestKontra req ctx (accessControlAPIV2Delete roleId)
  assertEqual "non-admin user can't view non-existent role" 403 $ rsCode res
  where roleId = unsafeAccessRoleID 123

testNonGodModeUserCannotDeleteRoleWithoutPermissions :: TestEnv ()
testNonGodModeUserCannotDeleteRoleWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx  <- set #maybeUser (Just user) <$> mkContext defaultLang
  role <- fmap fromJust . dbUpdate . AccessControlCreateForUser uid2 $ UserAR uid2
  req  <- mkRequest POST []
  res  <- fst <$> runTestKontra req ctx (accessControlAPIV2Delete $ getRoleId role)
  assertEqual "non-admin user can't view a role without permission" 403 $ rsCode res
  where
    getRoleId (AccessRoleUser roleId _ _) = roleId
    getRoleId _ = unexpectedError "This shouldn't happen"

testNonGodModeUserCanDeleteOwnRole :: TestEnv ()
testNonGodModeUserCanDeleteOwnRole = do
  user <- instantiateUser $ randomUserTemplate { firstName      = return "Dave"
                                               , lastName       = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               , isCompanyAdmin = True
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  let uid = user ^. #id
  role <- fmap fromJust . dbUpdate . AccessControlCreateForUser uid $ UserAR uid
  req  <- mkRequest POST []
  res  <- fst <$> runTestKontra req ctx (accessControlAPIV2Delete $ getRoleId role)
  assertEqual "non-admin user can view own role" 200 $ rsCode res
  where
    getRoleId (AccessRoleUser roleId _ _) = roleId
    getRoleId _ = unexpectedError "This shouldn't happen"

testGodModeUserCanDeleteRoleWithoutPermissions :: TestEnv ()
testGodModeUserCanDeleteRoleWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName  = return "Lister"
                                               , email     = return emailAddress
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx  <- setUser user <$> mkContext defaultLang
  role <- fmap fromJust . dbUpdate . AccessControlCreateForUser uid2 $ UserAR uid2
  req  <- mkRequest POST []
  res  <- fst <$> runTestKontra req ctx (accessControlAPIV2Delete $ getRoleId role)
  assertEqual "admin user can view a role without permission" 200 $ rsCode res
  where
    setUser user = set #maybeUser (Just user) . set #adminAccounts [Email emailAddress]
    emailAddress = "dave.lister@scrive.com"
    getRoleId (AccessRoleUser roleId _ _) = roleId
    getRoleId _ = unexpectedError "This shouldn't happen"

-- AccessControl add role by ID tests

roleJSON :: UserID -> UserID -> String
roleJSON uid1 uid2 =
  "\
  \{\
  \    \"role_type\": \"user\",\
  \    \"source\": {\
  \        \"type\": \"user\",\
  \        \"id\": \""
    ++ src_uid
    ++ "\"\
  \    },\
  \    \"target\": {\
  \        \"type\": \"user\",\
  \        \"id\": \""
    ++ trg_uid
    ++ "\"\
  \    }\
  \}"
  where
    src_uid = show uid1
    trg_uid = show uid2

testNonGodModeUserCannotAddRoleFromNonExistentUser :: TestEnv ()
testNonGodModeUserCannotAddRoleFromNonExistentUser = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  let jsonString = roleJSON (user ^. #id) (unsafeUserID 321)
  req <- mkRequest POST [("role", inText $ T.pack jsonString)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "non-admin user can't add role for non-existent user (src)" 403 $ rsCode res

testNonGodModeUserCannotAddRoleForNonExistentUser :: TestEnv ()
testNonGodModeUserCannotAddRoleForNonExistentUser = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  let jsonString = roleJSON (unsafeUserID 321) (user ^. #id)
  req <- mkRequest POST [("role", inText $ T.pack jsonString)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "non-admin user can't add role for non-existent user (trg)" 403 $ rsCode res

testGodModeUserCannotAddRoleFromNonExistentUser :: TestEnv ()
testGodModeUserCannotAddRoleFromNonExistentUser = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName  = return "Lister"
                                               , email     = return emailAddress
                                               }
  ctx <- setUser user <$> mkContext defaultLang
  let jsonString = roleJSON (user ^. #id) (unsafeUserID 321)
  req <- mkRequest POST [("role", inText $ T.pack jsonString)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "admin user can't add role for non-existent user (src)" 403 $ rsCode res
  where
    emailAddress = "dave.lister@scrive.com"
    setUser user = set #maybeUser (Just user) . set #adminAccounts [Email emailAddress]

testGodModeUserCannotAddRoleForNonExistentUser :: TestEnv ()
testGodModeUserCannotAddRoleForNonExistentUser = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName  = return "Lister"
                                               , email     = return emailAddress
                                               }
  ctx <- setUser user <$> mkContext defaultLang
  let jsonString = roleJSON (unsafeUserID 321) (user ^. #id)
  req <- mkRequest POST [("role", inText $ T.pack jsonString)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "admin user can't add role for non-existent user (trg)" 403 $ rsCode res
  where
    emailAddress = "dave.lister@scrive.com"
    setUser user = set #maybeUser (Just user) . set #adminAccounts [Email emailAddress]

testNonGodModeUserCannotAddRoleWithoutPermissions :: TestEnv ()
testNonGodModeUserCannotAddRoleWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName = return "Lister"
                                               , email = return "dave.lister@scrive.com"
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx <- set #maybeUser (Just user) <$> mkContext defaultLang
  let jsonString = roleJSON (user ^. #id) uid2
  req <- mkRequest POST [("role", inText $ T.pack jsonString)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "non-admin user can't add role without permissions (trg)" 403 $ rsCode res

testNonGodModeUserCanAddRoleWithPermissions :: TestEnv ()
testNonGodModeUserCanAddRoleWithPermissions = do
  user1 <- instantiateRandomUser
  user2 <- instantiateRandomUser
  ctx   <- set #maybeUser (Just user1) <$> mkContext defaultLang
  void . dbUpdate . AccessControlCreateForUser (user1 ^. #id) $ UserAdminAR
    (user2 ^. #groupID)
  let jsonText = roleUserAdminJSON (user2 ^. #id) (user2 ^. #groupID)
  req <- mkRequest POST [("role", inText jsonText)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "non-admin user can add role with permissions (trg)" 200 $ rsCode res

roleUserAdminJSON :: UserID -> UserGroupID -> Text
roleUserAdminJSON src_uid trg_ugid =
  "\
  \{\
  \    \"role_type\": \"user_admin\",\
  \    \"source\": {\
  \        \"type\": \"user\",\
  \        \"id\": \""
    <> showt src_uid
    <> "\"\
  \    },\
  \    \"target\": {\
  \        \"type\": \"user_group\",\
  \        \"id\": \""
    <> showt trg_ugid
    <> "\"\
  \    }\
  \}"

testGodModeUserCanAddRoleWithoutPermissions :: TestEnv ()
testGodModeUserCanAddRoleWithoutPermissions = do
  user <- instantiateUser $ randomUserTemplate { firstName = return "Dave"
                                               , lastName  = return "Lister"
                                               , email     = return emailAddress
                                               }
  uid2 <- fmap (view #id) . instantiateUser $ randomUserTemplate
    { firstName = return "Arnold"
    , lastName  = return "Rimmer"
    , email     = return "arnold.rimmer@scrive.com"
    }
  ctx <- setUser user <$> mkContext defaultLang
  let jsonString = roleJSON (user ^. #id) uid2
  req <- mkRequest POST [("role", inText $ T.pack jsonString)]
  res <- fst <$> runTestKontra req ctx accessControlAPIV2Add
  assertEqual "admin user can add role without permissions (trg)" 200 $ rsCode res
  where
    emailAddress = "dave.lister@scrive.com"
    setUser user = set #maybeUser (Just user) . set #adminAccounts [Email emailAddress]
